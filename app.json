[{"name":"app.r","content":"library(tidyverse)\r\nlibrary(shiny)\r\nlibrary(ggplot2)\r\nlibrary(gridExtra)\r\n#Sys.setlocale(\"LC_ALL\", \"German\")\r\n#options(encoding = \"UTF-8\")\r\n\r\n\r\n#require(shinylive)\r\n#input <- 'C:/Users/mathi/OneDrive - University of Bergen/PhD/KJEM250/ControlChart/T1'\r\n#input <- 'C:/Users/viy009/OneDrive - University of Bergen/PhD/KJEM250/ControlChart/T1'\r\n#output <- 'C:/Users/mathi/OneDrive - University of Bergen/PhD/KJEM250/ControlChart/OutputT1'\r\n#output <- 'C:/Users/viy009/OneDrive - University of Bergen/PhD/KJEM250/ControlChart/OutputT1'\r\n#export(input,output)\r\n\r\n\r\n\r\n# Define the URL of your Google Sheets\r\n#sheet_url <- \"https://docs.google.com/spreadsheets/d/e/2PACX-1vQ8cGfA3AW7mU3DCMsYnjUkJZsfqUL5yJpg6USPEffM4sFGeKqg4DParhUM-mBe-Wof-zXLCtMdlKRL/pub?output=csv\"\r\n\r\n# Define the UI\r\nui <- fluidPage(\r\n  title = 'T1 Control Charts',\r\n  titlePanel(\"Control Charts for T1\"),\r\n  tags$head(tags$script(src = \"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-AMS-MML_HTMLorMML\")),\r\n  mainPanel(\r\n    plotOutput(\"dataPlot\"),\r\n    title = \"Diagnostics\", \r\n    h4(textOutput(\"diagTitle\")),\r\n    uiOutput(\"formula\")\r\n  )\r\n)\r\n\r\n\r\n\r\n\r\n# Define server logic\r\nserver <- function(input, output) {\r\n  \r\n  old.cu.10 <- c(75.1,75.5,74.6,75.0,74.5)\r\n  old.cu.50 <- c(96.03,96.4,96.1,98,96.8,97,95.9,96.7,97,\r\n                 96.8,96.4,96.0,97.55,97,96.8,97.5,96.9,97.0,\r\n                 96.03,95.9 ,96.9,96.5 ,96.0,96.65,97.1)\r\n  \r\n  \r\n  df.old <- data.frame(x = 1:length(old.cu.10),\r\n                       y = old.cu.10)\r\n\r\n  df.1.old <- data.frame(x = 1:length(old.cu.50),\r\n                         y = old.cu.50)\r\n  \r\n  output$dataPlot <- renderPlot({\r\n    # Read the data from Google Sheets\r\n   # df <- data.frame(read.csv(text = gsheet2text(sheet_url)))\r\n\r\n    df <- read.csv('https://docs.google.com/spreadsheets/d/e/2PACX-1vQ8cGfA3AW7mU3DCMsYnjUkJZsfqUL5yJpg6USPEffM4sFGeKqg4DParhUM-mBe-Wof-zXLCtMdlKRL/pub?output=csv')\r\n    \r\n    \r\n    df[,4] <- as.numeric(gsub(\",\", \".\", df[,4]))\r\n    df[,5] <- as.numeric(gsub(\",\", \".\", df[,5]))\r\n    \r\n    df.1 <- data.frame(x=df[,2], y = df[,5],z =df[,6]) \r\n    df.1 <- na.omit(df.1)\r\n    df.1$x <- rank(as.Date(df.1$z, format=\"%d.%m.%Y\"), ties.method = \"first\")\r\n    df.1 <- rbind(df.1[,1:2], df.1.old)\r\n    \r\n    \r\n    df <- data.frame(x=df[,2],y=df[,4],z =df[,6])\r\n    df <- na.omit(df)\r\n    df$x <- rank(as.Date(df$z, format=\"%d.%m.%Y\"), ties.method = \"first\")+length(old.cu.10)\r\n    \r\n    df <- rbind(df[,1:2], df.old)\r\n    \r\n    \r\n    \r\n    df$type <- '10 Ore'\r\n    df.1$type <- '50 Ore'\r\n    \r\n    df.tot <- rbind(df,df.1)\r\n    df.tot <- df.tot %>%\r\n      group_by(type) %>%\r\n      mutate(\r\n        median_y = median(y),\r\n        upper_warning = median_y + 2 * mad(y)/sqrt(2),\r\n        lower_warning = median_y - 2 * mad(y)/sqrt(2),\r\n        upper_action = median_y + 3 * mad(y)/sqrt(2),\r\n        lower_action = median_y - 3 * mad(y)/sqrt(2)\r\n      ) %>%\r\n      ungroup()\r\n    \r\n    # Use the preprocessed data in the plot\r\n    p1 <- ggplot(data = df.tot, aes(x = x, y = y)) +\r\n      geom_hline(aes(yintercept = median_y,colour = 'Median'), \r\n                 linetype = \"dashed\", lwd = 1) +\r\n      geom_hline(aes(yintercept = upper_warning,colour = 'Warning Line'), \r\n                 linetype = \"dashed\", lwd = 1) +\r\n      geom_hline(aes(yintercept = lower_warning,colour = 'Warning Line'),\r\n                 linetype = \"dashed\", lwd = 1) +\r\n      geom_hline(aes(yintercept = upper_action,colour = 'Action Line'), \r\n                 linetype = \"dashed\", lwd = 1) +\r\n      geom_hline(aes(yintercept = lower_action,colour = 'Action Line'), \r\n                 linetype = \"dashed\", lwd = 1) +\r\n      geom_point(color = \"black\",fill = \"#73001d\" , size = 3, stroke = 2, shape = 21) +\r\n      theme_bw() +\r\n      xlab('Group ordered by date') +\r\n      ylab('Mass Percent Cu [%]') +\r\n      facet_wrap(~type, scales = 'free')+\r\n      scale_colour_manual(name='',labels = c('Action Line',\r\n                                             'Median', 'Warning Line'\r\n                                           ),\r\n                        values = c('#73001d','#177F57','#07438B' ))+\r\n      theme(strip.text = element_text(size = 20))\r\n  \r\n    \r\n    \r\n    print(p1)\r\n})\r\n\r\n  \r\n  \r\n  output$formula <- renderUI({\r\n    HTML(\"The control charts (Harris, 5-1) are estimated using robust statistics; instead of the mean and standard deviation, the median and mean absolute deviation are used.\")\r\n  })\r\n}\r\n\r\n# Run the application \r\nshinyApp(ui = ui, server = server)\r\n\r\n\r\n\r\n\r\n\r\n","type":"text"}]
